# Common Vulnerabilities & Prevention
- Use parameterized queries or ORMs or `Templates` to prevent SQL injection attacks
- Sanitize user input and escape output to prevent XSS attacks
- Use CSRF tokens to protect against CSRF attacks
- Avoid executing arbitrary commands based on user input. If necessary, sanitize input carefully
- Validate file paths to prevent path traversal attacks
- Implement rate limiting and input validation to protect against DoS attacks
- Avoid using `pickle` to deserialize untrusted data, as it can lead to arbitrary code execution. Use safer alternatives like JSON or Protocol Buffers
- Regularly audit and update dependencies to address security vulnerabilities
- Never hardcode secrets (passwords, API keys) in code. Use environment variables or secure configuration files

# Authentication & Authorization
- Use strong password hashing algorithms (e.g., bcrypt, Argon2)
- Implement multi-factor authentication (MFA)
- Use secure session management techniques
- Consider using a dedicated authentication service (e.g., Auth0, Okta)
- Implement role-based access control (RBAC) or attribute-based access control (ABAC)
- Use a permissions system to control access to resources
- Enforce the principle of least privilege
- Use access tokens (JWTs)

# Data Protection
- Encrypt sensitive data at rest and in transit
- Mask sensitive data when displaying it to users
- Replace sensitive data with non-sensitive tokens
- Implement DLP measures to prevent sensitive data from leaving the organization

# Secure API Communication
- Always use HTTPS for API communication
- Use API keys for authentication
- Use OAuth 2.0 for delegated authorization
- Validate all API requests before processing
- Implement rate limiting to prevent abuse
- Implement WAF to provide centralized security layer