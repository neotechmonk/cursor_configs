---
title: Python Coding Practices & Patterns
description: Everyday coding rules, design patterns, anti-patterns, error handling, and state management.
appliesTo:
  - python
---

# Design Patterns
- Strategy, Factory, Observer, Decorator, Context Manager
- Repository/adapters for persistence flexibility
### 3.5. Lazy Loading Strategies

*   **Module Loading:**  Use `importlib.import_module()` to load modules on demand.
*   **Data Loading:** Load large datasets only when needed.
*   **Deferred Execution:**  Use generators or coroutines to defer execution of code.

# Error Handling
- Catch specific exceptions > Exception or BaseException
- Use context managers for cleanup
- Log tracebacks (sanitize sensitive data)
- Raise informative exceptions 
- Dont user exceptions as control flow

# State Management
- Stateless functions where possible
- Use immutability
- Explicit state over globals
- `contextvars` for async state


# Anti-patterns
Refer to @`.cursor\rules\xx. python-anti-patterns.mdc`
