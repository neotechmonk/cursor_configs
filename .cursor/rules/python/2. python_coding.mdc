
# Design Patterns
- Strategy, Factory, Observer, Decorator, Context Manager
- Repository/adapters for persistence flexibility
### 3.5. Lazy Loading Strategies

*   **Module Loading:**  Use `importlib.import_module()` to load modules on demand.
*   **Data Loading:** Load large datasets only when needed.
*   **Deferred Execution:**  Use generators or coroutines to defer execution of code.

# Error Handling
- Catch specific exceptions > Exception or BaseException
- Use context managers for cleanup
- Log tracebacks (sanitize sensitive data)
- Raise informative exceptions 
- Dont user exceptions as control flow

# State Management
- Stateless functions where possible
- Use immutability
- Explicit state over globals
- `contextvars` for async state

# Import Clarity
- **Avoid __init__.py re-exports** for main classes/functions
- **Use direct imports** to make source locations clear
- **__init__.py should only contain:**
  - Package documentation
  - Version information  
  - Essential package-level constants
  - NOT re-exporting main classes
- **Import paths should be explicit:**
  - `from core.sessions.session import TradingSession` ✅
  - `from core.sessions import TradingSession` ❌ (unclear source)
- **Benefits:**
  - Clear source locations for developers
  - Easier debugging and maintenance
  - No hidden import magic
  - Follows "Explicit is better than implicit" principle

# Anti-patterns
Refer to @`.cursor\rules\xx. python-anti-patterns.mdc`
