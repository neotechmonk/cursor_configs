---
description: Code style enforcement, linting tools, and formatting standards
globs: ["**/*.py", "**/pyproject.toml", "**/.pre-commit-config.yaml"]
---

# Python Linting & Code Quality

<rule>
name: python_linting
description: Rules for Python code style enforcement, linting tools, and formatting standards
filters:
  - type: file_extension
    pattern: "\\.py$"
  - type: file_name
    pattern: "(pyproject\\.toml|setup\\.cfg|requirements.*\\.txt)"
actions:
  - type: suggest
    message: |
      Python Linting & Code Quality Rules:

      1. Style Guidelines:
         - Adhere to PEP 8 style guidelines
         - Maintain consistent code style throughout the project
         - Use 4 spaces for indentation (no tabs)
         - Maximum line length of 88 characters (Black default)

      2. Linting Tools:
         - Use Ruff for fast Python linting and formatting
         - Ruff replaces flake8, pylint, Black, isort, and more
         - Use mypy for type checking (Ruff doesn't handle types yet)
         - Configure Ruff in pyproject.toml

      3. Formatting:
         - Use Ruff for automatic code formatting (faster than Black)
         - Use Ruff for import sorting (faster than isort)
         - Ruff automatically follows PEP 8 and Black formatting
         - Run Ruff before committing

      4. Quality Assurance:
         - Use pre-commit hooks to run linters and formatters
         - Configure pre-commit with .pre-commit-config.yaml
         - Run linting in CI/CD pipeline
         - Fix all linting errors before merging

      5. Configuration:
         - Store tool configurations in pyproject.toml
         - Use consistent settings across development environments
         - Document any deviations from standard configurations

examples:
  - input: |
      # Install Ruff using uv (faster than pip)
      uv add ruff mypy pre-commit

  - input: |
      # Run Ruff for linting and formatting
      ruff check .          # Lint code
      ruff format .         # Format code
      ruff check --fix .    # Auto-fix linting issues

  - input: |
      # Run type checker
      mypy src/

metadata:
  priority: high
  version: 1.0
  tags:
    - python
    - linting
    - code-quality
    - formatting
</rule>

# Formatting
- **Formatters:** Use formatters to automatically format code according to PEP 8.

# Quality Assurance
- **Pre-commit Hooks:** Use pre-commit hooks to run linters and formatters before committing code.