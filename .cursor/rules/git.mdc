---
description: Git commit standards and guidelines to ensure consistent and error-free commits
globs: ["**/.git/**/*"]
---

# Git Commit Guidelines

## 1. Quick Reference

### 1.1 Single-Line Commits (Preferred)
```bash
# Safe single-line commit and push
git add . && git commit -m "type(scope): description" && git push

# Example:
git add . && git commit -m "feat(auth): add OAuth2 integration" && git push
```

### 1.2 Multi-Line Commits (For Complex Changes)
```bash
# Safe multi-line commit using temporary file
echo "type(scope): brief description

- Detail 1
- Detail 2" > .git/COMMIT_EDITMSG && git commit -F .git/COMMIT_EDITMSG && git push
```

## 2. Branch Naming Conventions

### 2.1 Branch Structure
```
type/scope-description
```

### 2.2 Branch Types
- `feature/`: New features or enhancements
- `fix/`: Bug fixes
- `refactor/`: Code restructuring without changing functionality
- `docs/`: Documentation updates
- `test/`: Test-related changes
- `chore/`: Maintenance tasks
- `hotfix/`: Critical production fixes

### 2.3 Branch Examples
```bash
# Feature branches
feature/user-authentication
feature/order-management-system
feature/data-abstraction-poc

# Fix branches
fix/login-validation-error
fix/order-processing-timeout
fix/memory-leak-in-cache

# Refactor branches
refactor/restructure-core-modules
refactor/optimize-database-queries
refactor/cleanup-deprecated-apis

# Documentation branches
docs/api-endpoint-documentation
docs/setup-instructions
docs/architecture-overview

# Test branches
test/integration-test-coverage
test/unit-test-improvements
test/performance-benchmarks

# Chore branches
chore/update-dependencies
chore/cleanup-unused-code
chore/ci-pipeline-improvements

# Hotfix branches
hotfix/critical-security-patch
hotfix/production-data-corruption
hotfix/urgent-performance-issue
```

### 2.4 Branch Naming Rules
1. Use lowercase letters and hyphens only
2. Keep branch names descriptive but concise (max 50 characters)
3. Use present tense, imperative mood
4. Include scope when relevant (module/component name)
5. Avoid special characters except hyphens
6. Make branch purpose clear from the name

### 2.5 Branch Creation Commands
```bash
# Create and switch to new branch
git checkout -b feature/user-authentication

# Create branch from specific commit
git checkout -b fix/login-bug abc1234

# Create branch from another branch
git checkout -b feature/advanced-auth feature/user-authentication
```

## 3. Commit Message Format

### 3.1 Structure
```
type(scope): brief description
```

### 3.2 Types
- `feat`: New feature
- `fix`: Bug fix
- `docs`: Documentation
- `style`: Formatting
- `refactor`: Code restructuring
- `test`: Test changes
- `chore`: Maintenance

### 3.3 Scopes
- `api`: API changes
- `ui`: UI changes
- `db`: Database
- `auth`: Authentication
- `cursor`: Cursor rules
- `docs`: Documentation
- `test`: Testing
- `core`: Core functionality

## 4. Error Prevention

### 4.1 ✅ CORRECT Patterns
```bash
# Single quotes
git commit -m 'feat(auth): add login flow'

# Double quotes
git commit -m "fix(api): resolve timeout issue"

# File-based for multi-line
echo "feat(ui): add responsive layout

- Add mobile breakpoints
- Implement flex containers
- Update media queries" > .git/COMMIT_EDITMSG && git commit -F .git/COMMIT_EDITMSG
```

### 4.2 ❌ INCORRECT Patterns
```bash
# DON'T use newlines in -m flag
git commit -m "feat(ui): add layout
- Add breakpoints
- Update styles"

# DON'T use multiple -m flags
git commit -m "feat(ui): add layout" -m "- Add breakpoints"
```

## 5. Best Practices

### 5.1 Message Guidelines
1. Use imperative mood ("add" not "adds")
2. Keep first line under 50 characters
3. No period at end of subject line
4. Be specific and clear
5. Reference issue numbers when relevant

### 5.2 Commit Organization
1. Make atomic commits (one logical change)
2. Verify changes before committing
3. Run tests before pushing
4. Review the diff before committing
5. Keep commits focused and small

## 6. Common Patterns

### 6.1 Feature Work
```bash
git commit -m "feat(user): add email verification"
git commit -m "feat(auth): implement 2FA support"
```

### 6.2 Bug Fixes
```bash
git commit -m "fix(api): resolve rate limiting issue"
git commit -m "fix(ui): correct button alignment"
```

### 6.3 Documentation
```bash
git commit -m "docs(api): update endpoint documentation"
git commit -m "docs(setup): add deployment guide"
```

### 6.4 Refactoring
```bash
git commit -m "refactor(core): optimize data processing"
git commit -m "refactor(auth): simplify login flow"
```

## 7. Addition
Only add individuals changed specifically. 
E.g. 
```bash 
git add file1.py file2.py 
```
This is a supposed to `git add .`


## 8. Recovery Procedures

### 8.1 Fix Last Commit
```bash
# Amend commit message
git commit --amend -m "type(scope): corrected message"

# Amend commit content
git add forgotten-file
git commit --amend --no-edit
```

### 8.2 Split Failed Commit
```bash
# Reset last commit
git reset HEAD~1

# Commit changes separately
git add feature-files
git commit -m "feat(scope): first part"
git add test-files
git commit -m "test(scope): add tests"
```

## 9. Automation

### 9.1 Git Aliases
```bash
# Add to ~/.gitconfig
[alias]
  # Commit with message
  cm = "!f() { git commit -m \"$1\"; }; f"
  
  # Add, commit, and push
  acp = "!f() { git add . && git commit -m \"$1\" && git push; }; f"
  
  # Safe multi-line commit
  mcm = "!f() { echo \"$1\" > .git/COMMIT_EDITMSG && git commit -F .git/COMMIT_EDITMSG; }; f"
```

### 9.2 Shell Functions
```bash
# Add to ~/.zshrc or ~/.bashrc

# Safe single-line commit
commit() {
  git add . && git commit -m "$1" && git push
}

# Safe multi-line commit
mcommit() {
  echo "$1" > .git/COMMIT_EDITMSG && git commit -F .git/COMMIT_EDITMSG && git push
}
```

## 10. Pre-commit Checklist

1. Code Quality
   - Run linters E.g. `ruff`
   - Check formatting E.g. `ruff`
   - Remove debug code E.g. `print` statements
   - Run tests

2. Security
   - No sensitive data
   - No API keys
   - No credentials
   - Check file permissions

3. Commit Message
   - Correct type and scope
   - Clear description
   - No newlines in -m flag
   - Reference issues if applicable

4. Changes
   - Review diff
   - Verify file inclusions
   - Check for unintended changes
   - Confirm test coverage 

## 11. Mandatory Diff Review

### 11.1 Pre-Commit Diff Check
Before any commit, ALWAYS run:
```bash
# Check status first
git status | cat

# Then review changes in detail
git diff | cat

# For staged changes
git diff --staged | cat
```

### 11.2 Diff Review Checklist
1. File Changes
   - Confirm all intended files are modified
   - No unintended file deletions
   - No sensitive files exposed

2. Code Changes
   - Review each chunk of changes
   - Verify line deletions are intentional
   - Check for debugging code
   - Confirm formatting changes

3. Large Changes Warning
   - If more than 500 lines changed, break into smaller commits
   - For large deletions, double-check necessity
   - Request confirmation for significant file removals

4. Post-Review Actions
   - Address any unintended changes
   - Remove debug statements
   - Fix formatting issues
   - Split into multiple commits if needed 